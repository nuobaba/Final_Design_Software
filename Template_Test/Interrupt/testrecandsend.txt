//{
//u16 RxData; 
//RxData = USART_ReceiveData(USART2);
//}


loop1
{
//收振动传感器数据
u16 RxData; 
USART_ReceiveData(USART2);

//数据放入数据寄存器。
//RxData = USART_DR_DR;

/********************接收单个字符********************/
void USART_RecByte( USART_TypeDef * pUSARTx, uint_16_t  RecData)
{

USART_ReceiveData(pUSARTx);
RecData = USART_ReceiveData(pUSARTx);

//判断接收寄存器满标志位;
while(USART_GetFlagStatus(pUSARTx, USART_FLAG_RTXE) == !RESET);
}


/***************** 接收字符串 **********************/

void Usart_ReceiveString( USART_TypeDef * pUSARTx, char *str)
 {
 unsigned int k=0;
 do 
{
 Usart_RecByte( pUSARTx, *(str + k) );
 k++;
 } 
while (*(str + k)!='\0'); 
 /* 等待接收完成 */
//(等待接收数据寄存器为满)
 while (USART_GetFlagStatus(pUSARTx,USART_FLAG_RTXE == !RESET)
 {
}
}



触发中断
进入中断
//将该该部分数据读入MCU

发送数据给变量？？
//RxData = USART_DR_DR;

/***************** 发送一个字符 **********************/
 void Usart_SendByte( USART_TypeDef * pUSARTx, uint8_t ch)
 {
 /* 发送一个字节数据到 USART */
 USART_SendData(pUSARTx,ch);
 
 /* 等待发送数据寄存器为空 */
 while (USART_GetFlagStatus(pUSARTx, USART_FLAG_TXE) == RESET);
 }





 /***************** 发送字符串 **********************/
 void Usart_SendString( USART_TypeDef * pUSARTx, char *str)
 {
 unsigned int k=0;
 do 
{
 Usart_SendByte( pUSARTx, *(str + k) );
 k++;
 } 
while (*(str + k)!='\0'); 
 /* 等待发送完成 */
//(等待发送数据寄存器为空)
 while (USART_GetFlagStatus(pUSARTx,USART_FLAG_TC)==RESET)
 {
 }
 }
Usart_SendString函数用来发送一个字符串，实际调用Usar_SendByte函数
发送每个字符，直到遇到空字符才停止发送。最后使用循环检测发送完成的
事件标志TC，保证数据完成后才退出函数。




进行数据库比较
//how to compare????
比较函数（）；


if（达标）
{
触发启动磁传感器  （置高电平）
触发启动摄像头     （置高电平）
}
不达标
break;
}









loop2
{
收磁传感器数据
寄存器满标志位
触发中断
进入中断
//将该该部分数据读入MCU
发送数据给变量？？
把数据处理（数据转角度）
送给舵机控制至口
清除数据标志位
读下一部分
}



void 比较函数（）
{
//查资料，不知道咋写

}






if(接收数据寄存器_TXE == SET)
{

USART_Recword(USART_TypeDef 8 * pUSARTx, uint16_t qmc)
{//uint8_t temp_h,temp_l;
uint4_t temp_l,temp_m;temp_h;
//取出低四位
temp_l = qmc&0xFF;
//取出中四位
temp_m = (qmc&0xFF)>>4;
//取出高四位
temp_h = (qmc&0xFF00)>>8;

USART_Sendata(pUSARTx, temp_h);
while (USART_GateFlagStatus(pUSARTx, USART_FLAG_TXE) == RESET)
USART_Sendata(pUSARTx,temp_m);
while (USART_GateFlagStatus(pUSARTx, USART_FLAG_TXE) == RESET)
USART_Sendata(pUSARTx,temp_l );
while (USART_GateFlagStatus(pUSARTx, USART_FLAG_TXE) == RESET)

}
}
